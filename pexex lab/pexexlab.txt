gdb ~eggert/bin64/bin/emacs-25.2
	//This was done in order to access gdb within this directory.
(gdb) break Ftimes
(gdb) r -Q -batch -eval '(print (* 1250284240 -1844255039))'
	//These commands first inserts a breakpoint when the function Ftimes is first called in the code. Then the given command is run to be debugged.
(gdb) set disassemble-next-line on
	//This toggles for GDB to display the assembly level details of the line after stepping
(gdb) set logging on
	//This was done in order to have the output of every step that will be run to be put into a file that will be the base of the trace file.
(gdb) stepi
	//This function was repetitively done until a ret was found corresponding to the return value in the arith_driver function, indicating Ftimes was done with its call.
(gdb) set logging off
	//Now that we have all the information we need, we set logging off
Because the format of the file and the information in the logging file was off, we had to format it so all the duplicate assembly code was deleted so that only ones with an arrow pointing to it would be kept.
cut -c 16- gdb.txt
	//This cut the beginning of all the lines so that the arrows, the 0x, and the leading 0s would all be deleted.
Next, we manually inserted spaces so that the < and : would be all lined up so that we could delete the information regarding the stack frame using a shell command.
sed 's/<..................//' gdb.txt > trace.tr
	//This shell command deleted the stackframe information from the trace.tr file, which we did not need as a column. Now we basically have the first three columns information formatted and all we need is the fourth column's information.
(gdb) info registers
(gdb) stepi
	//Back in gdb at the start of the Ftimes function, the info of the registers was tracked at each step until the return command was run. The register information was used to come up with the fourth column of trace.tr.
